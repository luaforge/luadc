bash-2.05b$ lua -l units -i
> -- 'units' requires "measure" (which is the guts of luaDC) and then
> -- initializes it with most of the SI units and a random assortment
> -- of other ones.
> --
> -- The names are put into the 'measures' package table, and 'units' then
> -- sets the measures package table as the __index table for the environment
> -- table. Under 5.0.2, that makes everything available without a package
> -- prefix; since I mostly use this with an interpreter shell, that made
> -- sense. It does pollute the namespace quite a bit. You have to try
> -- not to use one or two-letter identifiers. Most of them have been taken.
> --
> -- No adjustments have been made to the interpreter, so you need to use       
> -- * and / to combine units (and watch out for precedence: m / s * s
> -- does not mean m / s^2)
>
> -- For interactive use, I find it better to disable stack tracebacks
> -- so errors are less disruptive
> function _TRACEBACK(msg) return msg end
> -- So let's try some simple stuff:
> len = 3 * cm
> =len
3 cm
> =len + 22 * mm
5.2 cm
> speed = 5 * km / s  
> =speed
5 km / s
> =speed * 3
15 km / s
> =3 * speed
15 km / s
> -- More or less what you expect, I hope.
> -- Dimensions are important to luaDC 
> =speed + len
measure.lua:170: Incompatible dimensions `Length * Time^-1 (Velocity)' and `Length'
> -- It knows what the dimensions are
> =speed.dimension
Length * Time^-1 (Velocity)
> =len.dimension
Length
> -- OK, a simple problem:
> -- "If I walk 3.5 hours at 5 km / hour, how far will I go?"
> time = 3.5 * hour
> speed = 5 * km / hour
> =time * speed
17500 m
> -- luaDC tries to get display measures "right" but if it can't it falls back on the
> -- combination of "unit measures" for the quantity's dimensions.
> -- However, we can tell it what measure we want with the .. operator
> -- (I used .. because it has the right precedence, otherwise there would have been
> -- a lot more parentheses. But it's not the ideal solution.)
> =time * speed .. km
17.5 km
> -- .. does not change the quantity, it just changes the display characteristics
> distance = time * speed
> =distance
17500 m
> distance_in_km = distance .. km
> =distance_in_km
17.5 km
> -- They are the same amount
> = distance == distance_in_km
true
> = distance * 3
52500 m
> = distance_in_km * 3
52.5 km
> -- A few US and English measurements are available. (It's easy to add more.)
> = 1 * mile
1 mile
> = 3.7 * mile .. km
5.9545728 km
> = 3.7 * mile .. inch
234432 inch
> = 60 * mile / hour         
0.016666666666667 mile / s
> -- Better parenthesization would help
> = 60 * (mile / hour)
60 mile / hour
> -- There are some more details about this later. (mph is defined by units.lua, as well)
>
> -- So you can use that for quick conversions:
> = 60 * (mile / hour) .. m / s
26.8224 m / s
> 
> -- Measurements can be quite a bit more complex.
> -- A pascal is a unit of pressure:
> =pascal.dimension
Length^-1 * Mass * Time^-2 (Pressure, Stress)
> =pascal
1 Pa
> -- ok, let's get that in raw units. We can use .. nil for that.
> =pascal .. nil
1000 g / s^2 m
> -- (Actually SI would have preferred kg / s^2 m. There are still a few glitches.)
> -- Readers used to thinking of pressure as "pounds per square inch" may be puzzled 
> -- by those dimensions. The curious and science teachers looking for a tool for
> -- exploring these concepts might read on:
> --
> -- The "pound" in "pounds per square inch" is a sort of pun; it is not referring
> -- to the mass of a pound. What it refers to is the gravitational force between
> -- the earth and an object whose mass is one pound. That's the difference between
> -- "weight" and "mass"; it is common to use the same word ("pound") to refer to
> -- both things, but it is quite a different meaning. On the moon, a mass of one
> -- pound would weigh less, because the moon exerts less force on the object than
> -- the earth would, but it still has a mass of one pound.
> --
> -- Force is measured in terms of accelerating objects. As Newton pointed out
> -- many centuries ago, "an object in motion will tend to remain in motion".
> -- So you don't need to do anything to keep an object moving at a given velocity,
> -- (except for counteract friction, which is trying to slow it down), but you
> -- do need to use some Force to get it to speed up. The more you want it to
> -- speed up, the more Force you need.                                 
> --
> -- Acceleration can be faster or slower; the measurement is how much faster
> -- the object is in a given time:
> =Velocity
Length * Time^-1 (Velocity)
> -- (Did I mention that luaDC also knows about abstract dimensions? :)
> -- So Acceleration is a unit of Velocity over Time:
> =Velocity/Time
Length * Time^-2 (Acceleration)
> -- Force needs to take Mass into account, too. The more massive the object is,
> -- the more Force is required to accelerate it:
> =Mass * Velocity/Time
Length * Mass * Time^-2 (Force)
> -- In SI, Force is measured in newtons, named after the very same scientist.
> = 1 * newton
1 N
> = newton.dimension
Length * Mass * Time^-2 (Force)
> = newton .. nil   
1000 g m / s^2
> -- That is, a newton is the amount of Force required to get an object of mass
> -- 1 kg to increased its velocity by one meter per second every second:
> accel = 1 * m / s / s
> =accel
1 m / s^2
> =accel * kg
1000 g m / s^2
> = accel * kg .. SI
1 N
> -- (I'll explain .. SI a bit later)
> -- Now, there is a relationship between Mass and Weight, which is determined
> -- by the earth's gravitational force. Technically, it also depends on the 
> -- mass of the object, because (also due to Newton) gravity is related to
> -- the product of the masses of two objects, divided by the square of the
> -- distance between them. That is:
> Gravity = Mass * Mass / Length^2
> -- But obviously, that does not have the dimension of Force
> = Gravity == Force
false
> =Gravity
Length^-2 * Mass^2
> =Force
Length * Mass * Time^-2 (Force)
> -- So we say that the Force produced by gravity is *proportional* to the
> -- product of the masses divided by the square of the distance. Proportional
> -- means "multiplied by some constant" so we can write this as:
> --
> --   Gravitational Force = G * m * m / distance^2
> --
> -- where G is a constant called the "universal gravitational constant". But
> -- it is not just a number; in order to get the equation to work, we have
> -- to fill in the measurements. Now, we could just look this up on Wolfram
> -- (http://scienceworld.wolfram.com/physics/GravitationalConstant.html)
> -- but just for fun, let's work out what the units are:
> =Force/Gravity
Length^3 * Mass^-1 * Time^-2
> -- luaDC knows about the constant G (amongst other useful constants), so
> -- we could also have just asked:
> =G.dimension
Length^3 * Mass^-1 * Time^-2
> -- And here's the value:
> =G
6.6742e-14 m^3 / s^2 g
> -- Now, getting back to weight and mass. One of the objects in the equation is
> -- the earth. Since the distance is measured between the centres of the objects,
> -- the distance is the radius of the earth. Both of these values are relatively
> -- well known, so we'll just make a little table, throwing in some other
> -- astronomical objects (from a nice site by Bill Arnett, http://www.nineplanets.org)
> earth = {radius = 6378*km, mass = 5.97e24*kg}
> moon = {radius = 1738*km, mass = 7.35e22*kg}
> mars = {radius = 3397*km, mass = 6.42e23*kg}
> -- and a little function to compute gravitational force on a planet
> function grav(planet, mass)
>>   return G * planet.mass * mass / planet.radius^2
>> end
> =grav(earth, 1 * kg)
9795.0017507855 g m / s^2
> -- just to check if we got that right
> =grav(earth, 1 * kg).dimension
Length * Mass * Time^-2 (Force)
> =grav(earth, 1 * kg) .. newton
9.7950017507855 N
> -- So, the gravitational force of one kilogram with the earth is about 9.8 newtons
> -- (There are some reasons why this didn't quite work out to the right number, which
> -- is conventionally 9.80665; the main one is the inexactness of the measurements, but
> -- there is the fact that the earth is not quite circular, so gravitational force
> -- varies depending on latitude.)
> --
> -- Now, if we divide the output of grav by one kg, we get:
> =grav(earth, 1 * kg) / kg
9.7950017507855 m / s^2
> -- an acceleration                  
> =(grav(earth, 1 * kg) / kg).dimension
Length * Time^-2 (Acceleration)
> -- which is, unsurprisingly, how fast objects accelerate as the fall to earth.
> earth = {radius = 6371*km, mass = 5.9736e24*kg}
> =grav(earth, 1 * kg)
9822.4571929572 g m / s^2
> earth = {radius = 6378*km, mass = 5.97e24*kg}
> -- We can compare this with other planets:
> =grav(mars, 1 * kg) / grav(earth, 1 * kg)
0.37908677441054
> =grav(moon, 1 * kg) / grav(earth, 1 * kg)
0.1657992239919
> -- These values are commonly known as "g values"; the ratio of gravitational force
> -- on a planet with earth being 1.0 
> -- As we might expect, these values are simple numbers.
> =(grav(moon, 1 * kg) / grav(earth, 1 * kg)) . dimension
Scalar
> -- In fact, if we tell luaDC to forget about units, we actually get numbers:
> =type((grav(moon, 1 * kg) / grav(earth, 1 * kg)) .. nil)
number
> -- If we try to use them as numbers, we will find that they (mostly) work
> gmoon = grav(moon, 1 * kg) / grav(earth, 1 *kg)
> =gmoon + 70
70.1657992239919
> =gmoon * 3   
0.49739767197569
> -- Now, we could do a similar computation in English measurements, but we
> -- don't really need to. Let's go back to:
> = grav(earth, 1 * kg) / kg
9.7950017507855 m / s^2
> -- and multiply it by one pound (mass)
> = (grav(earth, 1 * kg) / kg) * (1 * pound)
4442.9380582929 g m / s^2
> -- oops, I meant:
> = (grav(earth, 1 * kg) / kg) * (1 * pound) .. US
385.62999018841 pound inch / s^2
> -- or, even better:
> = (grav(earth, 1 * kg) / kg) * (1 * pound) .. pound * foot / s^2
32.1358325157 pound foot / s^2
> -- That unit is usually called a "pound force", although the actual value
> -- used is based on being at latitude 45 and the constant is 32.174. Still,
> -- close enough. So when we talk of "pounds per square inch", we're actually
> -- talking about "pounds-force per square inch", and that can be converted
> -- directly to newtons. (As an aside, this is how you create a new measurement):
> Measure("Lbf", 32.174 * pound * foot / s^2)
> =Lbf .. N     
4.4482149020934 N
> Measure("psi", Lbf / inch^2)
> =psi .. Pa  
6894.7468877386 Pa
> =psi .. kPa
6.8947468877386 kPa
> --
> --
> --
> -- Scalars
> --
> -- For the first few hours of its life, luaDC reduced all scalars to Lua numbers.
> -- It can still deal with ordinary numbers just fine, but it is rather less
> -- prone to do the reduction. I'm not sure what the best balance is.
> --
> -- One of the reasons it doesn't is that it's handy to have Scalar quantities:
> Measure("percent", 1/100)
> = 13 * percent
13 percent
> -- IGV is the Peruvian sales tax 
> IGV = 19 * percent
> -- It's common to define Money as a Dimension, but exchange rates are complicated.
> -- For the sake of this example, we'll just assume that everything is reducible to
> -- Peruvian soles. (That's the plural of sol, meaning sun, by the way, and you 
> -- pronounce it in two syllables: "sol'-ays". sol more or less rhymes with coal.)
> -- When we define a Dimension, we need to specify its base unit. As with Measure,
> -- Dimension automatically introduces the newly minted measure into the package
> -- namespace, which happens to be the __index table of the global environment.
> Dimension("Money", "Sol")
> itemcost = 23.99 * Sol
> quantity = 5        
> totalcost = quantity * itemcost
> bill = totalcost + totalcost * IGV
> =bill
142.7405 Sol
> -- This is why it tries to remember measurement units.
> -- If exchange rates were static, we could have put them in the data file, but
> -- they're not, so we'll just use today's rate:
> Measure("USD",  3.24 * Sol)
> =bill .. USD
44.055709876543 USD
> -- Since a percentage is technically dimensionless, luaDC lets you do arbitrary
> -- arithmetic with it, although the math library doesn't like it:
> =IGV
19 percent
> =IGV * 3.5
66.5 percent
> =IGV * 3.5 + 27
2766.5 percent
> =math.max(IGV, .14)
stdin:1: bad argument #1 to `max' (number expected, got table)
> -- which comes back to using .. nil
> =math.max(IGV .. nil, .14)
0.19
> -- comparisons don't work either:
> = IGV > .14
stdin:1: attempt to compare number with table
> -- But we can convert .14 to a percentage
> = IGV > (.14 .. percent)
true
> -- luaDC's heuristics could probably be improved. But there is a limit,
> -- as long as Lua doesn't allow comparisons between numbers and objects.
> 
> -- A final note: domains
> -- But first :)
> -- Farmer Sue (in Canada) has 22 quarter-sections of wheat. She hopes to attain
> -- a yield of 104 bushels/acre. How many bushels does she hope to deliver to the
> -- Board?
> -- (If that didn't make any sense to you at all, just follow along :)
> wheatacreage = 22 * quarter
> expectedyield = 104 * (bushel/acre)
> delivery = wheatacreage * expectedyield
> =delivery
12900.319834809 m^3
> =delivery .. Farm 
366080 bushel
> -- .. is picky about what it lets you do
> =delivery .. acre
measure.lua:170: Incompatible dimensions `Length^3' and `Length^2'
> -- but Farm is not a unit, it's a domain
> =Farm
Length =        1 mile
Length^2 =      1 acre
Length^3 =      1 bushel
> -- A domain is a mapping between Dimensions and measurements. It lets
> -- you set up a convenient collection of measurement styles for a
> -- particular problem domain.
> -- For example, there is a Domain called US:
> =US
Current =       1 A
Current^-1 * Length^2 * Mass * Time^-3 (ElectromotiveForce) =   1 V
Current^-2 * Length^2 * Mass * Time^-3 (Resistance) =   1 O
Length * Time^-1 (Velocity) =   1 mile / hour
Length =        1 inch
Length^2 * Mass * Time^-3 (Power) =     1 W
Length^2 =      1 inch^2
Length^3 =      1 quart
Mass =  1 pound
Time =  1 s
> -- The .. operator attaches a Domain to a measurement. The __tostring
> -- metamethod, in turn, uses the Domain (if it finds one) to create 
> -- the output. If you give .. a measurement, and not a Domain, it
> -- creates a Domain with just that measure's dimension; but only if
> -- the subject has the right dimension. If you attach a pre-existing
> -- Domain, the check is avoided.
> --                           
> -- We've just lightly passed over another big reason for Domains:
> =expectedyield
104 bushel / acre
> -- I carefully created expectedyield as a product of a number with
> -- a measure (bushel/acre). If I'd done it the other way:
> expectedyield = 104 * bushel / acre
> =expectedyield
0.00090560751529233 m
> -- Right. bushel is a Volume and acre is an Area, and Volume / Area:
> =Volume / Area
Length
> -- is a length. That's logical enough: the harvest could be spread
> -- evenly over the entire field, and the yield (volume per acre)
> -- would be the thickness of the cover. But even if we converted
> -- that to inches:   
> =expectedyield .. inch
0.035653839184737 inch
> -- It's not going to appeal to Farmer Sue. (You can't really expect
> -- her to brag in her local bar that she had a really good crop:
> -- "almost .036 inches".)
> --
> -- Here's another case where dimensional analysis doesn't quite
> -- cut it. I've defined a unit called an "overacre"; that is,
> -- 1/acre. (I used to call this an "inverse acre" but "overacre"
> -- works better as a single word.)
> = overacre .. US
1.5942250790736e-07 / inch^2
> = acre
1 acre
> = acre .. SI
0.40468564224 ha
> = overacre .. SI
2.4710538146717 / ha
> =  overacre .. m^-2   
0.00024710538146717 m^-2
> -- So, what do we (not) measure in overacres?
> --
> --
> -- Got it yet?
> --
> --
> -- The answer is "fuel-efficiency"
> =overacre.dimension
Length^-2 (FuelEfficiency)
> =(mile / gallon).dimension
Length^-2 (FuelEfficiency)
> = 64 * mile / gallon .. Fun
110.11171474286 gigaoveracre
> -- OK, overacres are pretty small. So I set the Fun domain to measure    
> -- fuel efficiency in 10^9/acre, or gigaoveracres.
> -- Now, if I didn't have Fuel Efficiency in my domain at all, 
> -- miles per gallon (or kilometres per litre) would normalize to 1 / m^2
> -- which is just as silly, if not as funny.
> -- Fuel consumption, on the other hand (litre per kilometre), is simply
> -- an Area.
> =(l/km).dimension
Length^2 (Area)
> -- The abstraction to pure Dimensions loses some vital part of the equation:
> -- it was, after all, litres of combustible and kilometres of highway; cancelling
> -- the kilometre against the cube root of the litre is mathematically justifiable
> -- but not particularly useful.      
> --
> -- It does, however, provide the opportunity for thought. Imagine that the vehicle
> -- had no fuel tank; instead, it was sucking fuel from a long tube stretching along
> -- the highway. Now, the cross-section of this tube is the instantaneous fuel
> -- consumption. So it is, after all, quite reasonable to measure fuel consumption
> -- in square centimetres; and consequently to measure fuel efficiency in inverse
> -- square centimetres.
